# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cdagvine
else:
    import _cdagvine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import ndcctools.taskvine.cvine
class vine_task_graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    manager = property(_cdagvine.vine_task_graph_manager_get, _cdagvine.vine_task_graph_manager_set)
    nodes = property(_cdagvine.vine_task_graph_nodes_get, _cdagvine.vine_task_graph_nodes_set)
    task_id_to_node = property(_cdagvine.vine_task_graph_task_id_to_node_get, _cdagvine.vine_task_graph_task_id_to_node_set)
    outfile_cachename_to_node = property(_cdagvine.vine_task_graph_outfile_cachename_to_node_get, _cdagvine.vine_task_graph_outfile_cachename_to_node_set)
    proxy_library_name = property(_cdagvine.vine_task_graph_proxy_library_name_get, _cdagvine.vine_task_graph_proxy_library_name_set)
    proxy_function_name = property(_cdagvine.vine_task_graph_proxy_function_name_get, _cdagvine.vine_task_graph_proxy_function_name_set)
    task_priority_mode = property(_cdagvine.vine_task_graph_task_priority_mode_get, _cdagvine.vine_task_graph_task_priority_mode_set)
    failure_injection_step_percent = property(_cdagvine.vine_task_graph_failure_injection_step_percent_get, _cdagvine.vine_task_graph_failure_injection_step_percent_set)

    def __init__(self):
        _cdagvine.vine_task_graph_swiginit(self, _cdagvine.new_vine_task_graph())
    __swig_destroy__ = _cdagvine.delete_vine_task_graph

# Register vine_task_graph in _cdagvine:
_cdagvine.vine_task_graph_swigregister(vine_task_graph)

def vine_task_graph_create(q):
    return _cdagvine.vine_task_graph_create(q)

def vine_task_graph_set_task_priority_mode(tg, priority_mode):
    return _cdagvine.vine_task_graph_set_task_priority_mode(tg, priority_mode)

def vine_task_graph_set_failure_injection_step_percent(tg, percent):
    return _cdagvine.vine_task_graph_set_failure_injection_step_percent(tg, percent)

def vine_task_graph_add_node(tg, node_key, staging_dir, prune_depth):
    return _cdagvine.vine_task_graph_add_node(tg, node_key, staging_dir, prune_depth)

def vine_task_graph_add_dependency(tg, parent_key, child_key):
    return _cdagvine.vine_task_graph_add_dependency(tg, parent_key, child_key)

def vine_task_graph_compute_topology_metrics(tg):
    return _cdagvine.vine_task_graph_compute_topology_metrics(tg)

def vine_task_graph_get_node_heavy_score(tg, node_key):
    return _cdagvine.vine_task_graph_get_node_heavy_score(tg, node_key)

def vine_task_graph_set_node_outfile(tg, node_key, outfile_type, outfile_remote_name):
    return _cdagvine.vine_task_graph_set_node_outfile(tg, node_key, outfile_type, outfile_remote_name)

def vine_task_graph_set_proxy_library_and_function_names(tg, proxy_library_name, proxy_function_name):
    return _cdagvine.vine_task_graph_set_proxy_library_and_function_names(tg, proxy_library_name, proxy_function_name)

